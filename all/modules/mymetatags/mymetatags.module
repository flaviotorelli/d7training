<?php

/**
 * @file
 * Defines common base features for custom meta tags.
 */

/**
 * Implements hook_load().
 */
function mymetatags_map_load($id) {

  $sql = db_select('mymetatags', 'm')->fields('m')->condition('mtid', $id)->execute()->fetchObject();

  return $sql;

}

/**
 * Implements hook_init().
 */
function mymetatags_init() {
  //return 'test';
}


/**
 * Implements hook_permission().
 */
function mymetatags_permission() {
  return array(
    'manage page meta tags' => array(
      'title' => t('Manage page meta tags'),
      'description' => t('Manage page meta tags. Drupal training.'),
    ),
  );
}

/**
 * Implements hook_permission().
 */

/**
 * Implements hook_menu().
 */
function mymetatags_menu() {

  $items = array();

  $file_pages_src = 'mymetatags.pages.inc';
  
  $items['admin/config/search/mymetatags'] = array(
    'file' => $file_pages_src,
    'title' => 'Meta tags',
    'description' => 'Meta tags drupal training',
    'page callback' => 'mymetatags_list', 
    //'page callback' => '_mymetatags_out',
    'access arguments' => array('manage page metatags'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/search/mymetatags/list'] = array(
    'title' => 'List meta tags',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/search/mymetatags/update'] = array(
    'title' => 'Update meta tags',
    'page callback' => 'mymetatags_update', 
    'access arguments' => array('manage page metatags'),
    'type' => MENU_LOCAL_TASK,
    'file' => $file_pages_src,
  );
  
  /*$items['admin/config/search/mymetatags/%mymetatags_map'] = array(
    'title' => 'Meta tag details',
    'page callback' => '_mymetatags_more_info',
    'page arguments' => array(4),
    'access arguments' => array('manage page metatags'),
    'type' => MENU_CALLBACK,
    'file' => $file_pages_src,
   // 'access callback' => TRUE
  );*/

  $items['admin/config/search/mymetatags/%mymetatags_map'] = array(
    'title' => 'My Meta Tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymetatags_update_form', 4),
    'access arguments' => array('manage page metatags'),
    'type' => MENU_CALLBACK,
    'file' => 'mymetatags.pages.inc',
  );

  return $items;

}

// just for testing porpose
function _mymetatags_out() {
  return '<p><strong>Hello, <em>meta tags</em> world!</strong></p>';
}

/**
 * Implements hook_block_info().
 */
function mymetatags_block_info() {
  $blocks['insert_metatags'] = array(
    'info' => t('Meta tags insert form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mymetatags_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'insert_metatags':
      module_load_include('inc', 'mymetatags', 'mymetatags.pages');
      $block['content'] = drupal_get_form('mymetatags_insert_form');
      break;
  }

  return $block;
}

/**
 * Implements hook_mymetatags_list().
 */
function mymetatags_mymetatags_list() {

  return array('keywords' => 'Keywords', 'description' => 'Descriptions');

}

/**
 * Implements hook_preprocess_html().
 */
function mymetatags_preprocess_html($variables) {

  $q = drupal_get_normal_path($_GET['q']);

  $metatags = db_query("SELECT data, normal_path FROM {mymetatags} WHERE normal_path = :q", 
    array(':q' => $q));

  $count = $metatags->rowCount();

  if ($count > 0) {

    foreach ($metatags as $key => $value) {
      $metas = unserialize($value->data);
    }

    foreach ($metas as $key => $value) {
      drupal_add_html_head(array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => $key,
          'content' =>  $value,
        ),
      ), uniqid());
    }

  }
  
}

/**
 * Implements hook_mymetatags_map().
 */
function mymetatags_mymetatags_map() {

  return array(
    'product-one' => array(
      'keywords' => 'a, b, c',
      'description' => 'Abc abc abc',
    ),
    'product-two' => array(
      'keywords' => 'm, n, o',
      'description' => 'Mno Mno Mno'
    ),
    'product-three' => array(
      'keywords' => 'a, s, d, f, g',
      'description' => 'Asdfg asdfg'
    ),
    'contact-us' => array(
      'keywords' => 'contact',
      'description' => 'Contact us'
    ),
  );
}


/**
 * Meta tags insert form.
 */

function mymetatags_insert_form() {

  $form = array();
  $form['ajax'] = array(
    '#markup' => '<div id="ajax">status msg</div>',
  );

  $q = check_plain($_GET['q']);

  // available meta tags
  $available_metatags = module_invoke_all('mymetatags_list');

  // checking if there is any metata for the current page
  $get_metatags = db_query("SELECT data FROM {mymetatags} WHERE normal_path = :normal_path LIMIT 1",
    array(':normal_path' => $q))->fetchField();

  $data = unserialize($get_metatags);

  foreach ($available_metatags as $key => $value) {
    $form['metatag_'. $key] = array(
      '#type' => 'textfield',
      '#title' => $key,
      '#default_value' => (!empty($data[$key]))?$data[$key]:'',
      '#description' => (empty($data[$key]))?'Insert '.$key:'Update '.$key 
    );
  }

  $form['normal_path'] = array(
    '#type' => 'value',
    '#value' => $q
  );

  $form['update_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    //'#submit' => array('mymetatags_insert_js_form_submit'),
    '#ajax' => array(
      'callback' => 'mymetatags_ajax_test',
      'wrapper' => 'ajax',
      'effect' => 'fade',
      )
  );

  return $form;

}

function mymetatags_ajax_test($form, $form_state) {
  return '<div id="ajax">ok</div>';
}